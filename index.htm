<!DOCTYPE html>
<html>
<head>

  <meta charset="UTF-8">
    <title>server info container</title>
    <meta name="description" content="鯖が飛んだ時間を調べる便利ツールです">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="theme-color" content="#738581">
    <meta property="og:url" content="https://hatchingchick.github.io/discord-server-/">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Server info Counter">
    <meta property="og:description" content="鯖が飛んだ時間を調べる便利ツールです">
    <meta property="og:site_name" content="hatchingchicks">
    <meta property="og:image" content="https://cdn.discordapp.com/attachments/741698370250342571/970994935060897882/shp_sinen.png">
  <title>Discord Server Info</title>
  <style>
      body {
      background-image: url('https://i.ytimg.com/vi/mvMfLBwHRZ8/hqdefault.jpg');
      background-size: cover;
      display: flex;
      flex-direction: column;
      align-items: center;
      height: 100vh;
    }
    .server-info-container {
      background-color: white;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      width: 500px;
      margin-top: 50px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }
    #server-id-input {
      padding: 10px;
      font-size: 16px;
      margin-bottom: 20px;
      border-radius: 5px;
      border: none;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    }
    #update-button {
      padding: 10px 20px;
      background-color: dodgerblue;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    }
    #update-button:hover {
      background-color: deepskyblue;
    }
    #error-message {
      color: red;
      display: none;
      margin-top: 20px;
    }
    .server-info {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .error-message {
  color: red;
  font-weight: bold;
}
@media screen and (max-width: 600px) {
  .server-info-container {
    width: 250px;
  }
}

  </style>
</head>
<body>
  <div class="server-info-container">
    <h2>Server info Counter</h2>
<font>入力したサーバーが削除されると時刻が出力されます</font>
<br>
<font>（その間このタブは開いておく必要があります,数分の遅延あり）</font>
</br>
<br>
    <input type="text" id="server-id-input" placeholder="Enter Server ID">
  <button id="update-button">Get Server Info</button>
  <input type="text" id="webhook-input" placeholder="通知先のdiscord webhook">
<div class="server-info" style="display: none;">
  <p id="server-name"></p>
  <p id="server-member-count"></p>
</div>
<p id="error-message" style="display: none; color: red;"></p>
<p id="last-update-time" style="display: none;"></p>
<div class="server-info">
  <div id="server-name"></div>
  <div id="server-member-count"></div>
  <div id="error-message" class="error-message"></div>
  <div id="last-update-time"></div>
</div>
<script>
const updateButton = document.getElementById('update-button');
const serverInfoContainer = document.querySelector('.server-info');
const serverNameElement = document.getElementById('server-name');
const serverMemberCountElement = document.getElementById('server-member-count');
const errorMessageElement = document.getElementById('error-message');
const lastUpdateTimeElement = document.getElementById('last-update-time');

let intervalId;
let serverName = "";

updateButton.addEventListener('click', () => {
  clearInterval(intervalId);
  updateButton.textContent = "リセット";
  fetchServerInfo();
  intervalId = setInterval(fetchServerInfo, 1000 * 60 * 1);
  if (Notification.permission !== 'granted') {
    Notification.requestPermission().then(permission => {
      if (permission === 'granted') {
        const notification = new Notification('通知が許可されました。');
      }
    });
  }
});

function fetchServerInfo() {
  const serverIdInput = document.getElementById('server-id-input');
  const serverId = serverIdInput.value;

  fetch(`https://discord.com/api/guilds/${serverId}/widget.json`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Server information could not be retrieved.');
      }
      return response.json();
    })
    .then(data => {
      serverName = data.name;
      serverNameElement.innerHTML = serverName;
      const serverStatusMessage = serverName + " の状態を監視しています";
serverNameElement.innerHTML = serverStatusMessage;

      serverMemberCountElement.style.display = 'block';
      errorMessageElement.innerHTML = '';
      errorMessageElement.style.color = 'blue';
      serverInfoContainer.style.display = 'block';
      const fourMinutesAgo = new Date(Date.now() - 1000 * 60 * 4);
      lastUpdateTimeElement.innerHTML = `Last Updated: ${fourMinutesAgo.toLocaleString()}`;
      updateButton.textContent = "サーバー情報を更新する";
    })
    .catch(error => {
     
      const fourMinutesAgo = new Date(Date.now() - 1000 * 60 * 4);
      const errorMessage = error.message + `(${fourMinutesAgo.toLocaleString()})`;
      serverNameElement.innerHTML = `<strong style="color: blue; font-size: 20px;">ウィジェットが無効化されたか、サーバーは削除されました</strong> (${fourMinutesAgo.toLocaleString()})`;
      serverMemberCountElement.style.display = 'none';
      errorMessageElement.innerHTML = errorMessage;
      errorMessageElement.style.color = 'red';
      serverInfoContainer.style.display = 'block';
      lastUpdateTimeElement.innerHTML = '';
      clearInterval(intervalId);
      if (Notification.permission === 'granted') {
            const notification = new Notification('Server info Counterからの通知', {
              body: errorMessage,
            });
          }
      // エラーメッセージにserver nameと表示時刻を追加する
      const errorWithInfo = ` (Server Name: ${serverName}, Time: ${fourMinutesAgo.toLocaleString()})`;

      // Discord Webhookに通知を送信する
      const webhookInput = document.getElementById('webhook-input').value;
      if (webhookInput) {
        const payload = {
          content: errorWithInfo,
        };
        fetch(webhookInput, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload),
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Failed to send Discord webhook.');
            }
          })
          .catch(error => {
            console.error(error);
          });
      }
    });

}

</script>
</body>
</html>
